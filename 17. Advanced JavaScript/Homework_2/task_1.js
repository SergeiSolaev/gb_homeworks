/*
Задание 1
    Представьте, что у вас есть класс для управления библиотекой. В этом классе будет приватное свойство для хранения списка книг, а также методы для добавления книги, удаления книги и получения информации о наличии книги.

    Класс должен содержать приватное свойство #books, которое инициализируется пустым массивом и представляет собой список книг в библиотеке.

    Реализуйте геттер allBooks, который возвращает текущий список книг.

    Реализуйте метод addBook(title), который позволяет добавлять книгу в список. Если книга с таким названием уже существует в списке, выбросьте ошибку с соответствующим сообщением.

    Реализуйте метод removeBook(title), который позволит удалять книгу из списка по названию. Если книги с таким названием нет в списке, выбросьте ошибку с соответствующим сообщением.

    Реализуйте метод hasBook(title), который будет проверять наличие книги в библиотеке и возвращать true или false в зависимости от того, есть ли такая книга в списке или нет.

    Реализуйте конструктор, который принимает начальный список книг (массив) в качестве аргумента. Убедитесь, что предоставленный массив не содержит дубликатов; в противном случае выбрасывайте ошибку.
*/


//первоначальный массив с книгами для наполения нового экземпляра класса Library
let books = [
    {
        title: 'Сто лет одиночества',
        author: 'Габриель Гарсиа Маркес'
    },
    {
        title: 'Двести лет одиночества',
        author: 'Габриель Гарсиа Маркес'
    }
]

// класс для управления библиотекой 
class Library {
    #books = []

    // конструктор принимает в качестве аргумента массив из списка книг
    constructor(bookList) {

        // формируем массив из уникальных книг(удаляем повторяющиеся объекты)
        const uniqueBooks = [...new Map(bookList.map(item => [JSON.stringify(item), item])).values()];

        // если первоначальный массив книг не равен массиву с уникальными книгами uniqueBooks, то дубликаты есть, выбрасываем ошибку
        if (bookList.length !== uniqueBooks.length) {
            throw new Error('В списке книг содержаться дубликаты. Передайте список без дубликатов')
        }

        this.#books = bookList;
    }

    // геттер, возвращает список книг
    allBooks() {
        return this.#books;
    }

    // метод добавляет книгу в список
    addBooks(bookTitle, bookAuthor) {

        // если такой книги нет в библиотеке, то выводим сообщение что такой книги нет
        if (this.hasBook(bookTitle, bookAuthor)) {
            throw new Error('Такая книга уже есть в библиотеке')
        }

        this.#books.push(
            {
                title: bookTitle,
                author: bookAuthor
            }
        )
    }

    // метод удаляет книгу из списка
    removeBooks(bookTitle, bookAuthor) {
        // если такой книги нет в библиотеке, то выводим сообщение что такой книги нет
        if (!this.hasBook(bookTitle, bookAuthor)) {
            throw new Error('Такой книги нет в библиотеке')
        }
        // удаляем книгу
        this.#books = this.#books.filter(item => item.title !== bookTitle)
    }

    // метод проверяет наличие книги в библиотеке
    hasBook(bookTitle, bookAuthor) {
        let bookExist = false;
        // проверяем наличие книги в библиотеке
        for (let i = 0; i < this.#books.length; i++) {
            if (JSON.stringify(this.#books[i]) === `{"title":"${bookTitle}","author":"${bookAuthor}"}`
            ) {
                bookExist = true;
            }
        }
        return bookExist;
    }

}

let lib = new Library(books);

//lib.addBooks('Сто лет одиночества','Габриель Гарсиа Маркес');  // проверяем сработает ли ошибка, такая книга уже есть

lib.addBooks('Шерлок Холмс', 'Артур Коннан Дойл');                // добавляем новую книгу
console.log(lib.allBooks());

//lib.removeBooks('Шерлок Холмс','Пушкин');                      // проверяем сработает ли ошибка при удалении если
                                                                 //такой книги нет
lib.removeBooks('Шерлок Холмс', 'Артур Коннан Дойл');
console.log(lib.allBooks());

console.log(lib.hasBook('Сто лет одиночества','Габриель Гарсиа Маркес'));